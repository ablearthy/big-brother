// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgtype"
)

const createInviteCode = `-- name: CreateInviteCode :one
INSERT INTO invite_codes (
    user_id, invite_code
) VALUES (
    $1, $2
)
RETURNING user_id, invite_code
`

type CreateInviteCodeParams struct {
	UserID     int32
	InviteCode string
}

func (q *Queries) CreateInviteCode(ctx context.Context, arg CreateInviteCodeParams) (InviteCode, error) {
	row := q.db.QueryRow(ctx, createInviteCode, arg.UserID, arg.InviteCode)
	var i InviteCode
	err := row.Scan(&i.UserID, &i.InviteCode)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, password, inviter_id
) VALUES (
    $1, $2, $3
)
RETURNING id, username, password, inviter_id
`

type CreateUserParams struct {
	Username  string
	Password  string
	InviterID int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password, arg.InviterID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.InviterID,
	)
	return i, err
}

const createUserToken = `-- name: CreateUserToken :one
INSERT INTO user_tokens (
    user_id, access_token
) VALUES (
    $1, $2
)
RETURNING user_id, access_token
`

type CreateUserTokenParams struct {
	UserID      int32
	AccessToken sql.NullString
}

func (q *Queries) CreateUserToken(ctx context.Context, arg CreateUserTokenParams) (UserToken, error) {
	row := q.db.QueryRow(ctx, createUserToken, arg.UserID, arg.AccessToken)
	var i UserToken
	err := row.Scan(&i.UserID, &i.AccessToken)
	return i, err
}

const createVkToken = `-- name: CreateVkToken :exec
INSERT INTO vk_tokens (
    access_token, vk_user_id
) VALUES (
    $1, $2
)
ON CONFLICT DO NOTHING
`

type CreateVkTokenParams struct {
	AccessToken string
	VkUserID    int32
}

func (q *Queries) CreateVkToken(ctx context.Context, arg CreateVkTokenParams) error {
	_, err := q.db.Exec(ctx, createVkToken, arg.AccessToken, arg.VkUserID)
	return err
}

const deleteTokenById = `-- name: DeleteTokenById :one
DELETE FROM user_tokens WHERE user_id = $1
RETURNING user_id, access_token
`

func (q *Queries) DeleteTokenById(ctx context.Context, userID int32) (UserToken, error) {
	row := q.db.QueryRow(ctx, deleteTokenById, userID)
	var i UserToken
	err := row.Scan(&i.UserID, &i.AccessToken)
	return i, err
}

const getAllUserTokens = `-- name: GetAllUserTokens :many
SELECT user_tokens.user_id,
       user_tokens.access_token,
       vk_tokens.vk_user_id
FROM user_tokens
LEFT JOIN vk_tokens ON user_tokens.access_token = vk_tokens.access_token
`

type GetAllUserTokensRow struct {
	UserID      int32
	AccessToken sql.NullString
	VkUserID    sql.NullInt32
}

func (q *Queries) GetAllUserTokens(ctx context.Context) ([]GetAllUserTokensRow, error) {
	rows, err := q.db.Query(ctx, getAllUserTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUserTokensRow
	for rows.Next() {
		var i GetAllUserTokensRow
		if err := rows.Scan(&i.UserID, &i.AccessToken, &i.VkUserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountOfUsedInviteCodes = `-- name: GetCountOfUsedInviteCodes :one
SELECT count(*) FROM users
WHERE inviter_id = $1
`

func (q *Queries) GetCountOfUsedInviteCodes(ctx context.Context, inviterID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getCountOfUsedInviteCodes, inviterID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getLastMessages = `-- name: GetLastMessages :many
SELECT vk_message_events.id, m_type, msgs.message
FROM vk_message_events
LEFT JOIN vk_messages msgs ON internal_message_id = msgs.id
WHERE vk_owner_id = $1 AND vk_message_events.id < $2
ORDER BY vk_message_events.id DESC
LIMIT $3
`

type GetLastMessagesParams struct {
	VkOwnerID int32
	ID        int32
	Limit     int32
}

type GetLastMessagesRow struct {
	ID      int32
	MType   VkMessageEventType
	Message pgtype.JSONB
}

func (q *Queries) GetLastMessages(ctx context.Context, arg GetLastMessagesParams) ([]GetLastMessagesRow, error) {
	rows, err := q.db.Query(ctx, getLastMessages, arg.VkOwnerID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLastMessagesRow
	for rows.Next() {
		var i GetLastMessagesRow
		if err := rows.Scan(&i.ID, &i.MType, &i.Message); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastSavedVKMessage = `-- name: GetLastSavedVKMessage :one
SELECT max(id)
FROM vk_messages
WHERE vk_owner_id = $1 AND message_id = $2
`

type GetLastSavedVKMessageParams struct {
	VkOwnerID int32
	MessageID int32
}

func (q *Queries) GetLastSavedVKMessage(ctx context.Context, arg GetLastSavedVKMessageParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, getLastSavedVKMessage, arg.VkOwnerID, arg.MessageID)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const getMessageById = `-- name: GetMessageById :one
SELECT id, vk_owner_id, message_id, message FROM vk_messages WHERE id = $1
`

func (q *Queries) GetMessageById(ctx context.Context, id int32) (VkMessage, error) {
	row := q.db.QueryRow(ctx, getMessageById, id)
	var i VkMessage
	err := row.Scan(
		&i.ID,
		&i.VkOwnerID,
		&i.MessageID,
		&i.Message,
	)
	return i, err
}

const getTokenById = `-- name: GetTokenById :one
SELECT access_token FROM user_tokens
WHERE user_id = $1
`

func (q *Queries) GetTokenById(ctx context.Context, userID int32) (sql.NullString, error) {
	row := q.db.QueryRow(ctx, getTokenById, userID)
	var access_token sql.NullString
	err := row.Scan(&access_token)
	return access_token, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, inviter_id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.InviterID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, password FROM users
WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID       int32
	Password string
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const getUserIdByInviteCode = `-- name: GetUserIdByInviteCode :one
SELECT user_id FROM invite_codes
WHERE invite_code = $1 LIMIT 1
`

func (q *Queries) GetUserIdByInviteCode(ctx context.Context, inviteCode string) (int32, error) {
	row := q.db.QueryRow(ctx, getUserIdByInviteCode, inviteCode)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const getVkToken = `-- name: GetVkToken :one
SELECT access_token, vk_user_id
FROM vk_tokens
WHERE access_token = $1
`

func (q *Queries) GetVkToken(ctx context.Context, accessToken string) (VkToken, error) {
	row := q.db.QueryRow(ctx, getVkToken, accessToken)
	var i VkToken
	err := row.Scan(&i.AccessToken, &i.VkUserID)
	return i, err
}

const getVkUserIdByUserId = `-- name: GetVkUserIdByUserId :one
SELECT vk_tokens.vk_user_id
FROM user_tokens
LEFT JOIN vk_tokens ON user_tokens.access_token = vk_tokens.access_token
WHERE user_tokens.user_id = $1
`

func (q *Queries) GetVkUserIdByUserId(ctx context.Context, userID int32) (sql.NullInt32, error) {
	row := q.db.QueryRow(ctx, getVkUserIdByUserId, userID)
	var vk_user_id sql.NullInt32
	err := row.Scan(&vk_user_id)
	return vk_user_id, err
}

const saveActivityEvent = `-- name: SaveActivityEvent :exec
INSERT INTO vk_activity_events (
    vk_owner_id, target_id, activity, platform, kicked_by_timeout, created_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type SaveActivityEventParams struct {
	VkOwnerID       int32
	TargetID        int32
	Activity        VkActivity
	Platform        VkPlatform
	KickedByTimeout sql.NullBool
	CreatedAt       time.Time
}

func (q *Queries) SaveActivityEvent(ctx context.Context, arg SaveActivityEventParams) error {
	_, err := q.db.Exec(ctx, saveActivityEvent,
		arg.VkOwnerID,
		arg.TargetID,
		arg.Activity,
		arg.Platform,
		arg.KickedByTimeout,
		arg.CreatedAt,
	)
	return err
}

const saveMessageEvent = `-- name: SaveMessageEvent :exec
INSERT INTO vk_message_events (
    internal_message_id, m_type, created_at
) VALUES (
    $1, $2, $3
)
`

type SaveMessageEventParams struct {
	InternalMessageID int32
	MType             VkMessageEventType
	CreatedAt         time.Time
}

func (q *Queries) SaveMessageEvent(ctx context.Context, arg SaveMessageEventParams) error {
	_, err := q.db.Exec(ctx, saveMessageEvent, arg.InternalMessageID, arg.MType, arg.CreatedAt)
	return err
}

const saveVkMessage = `-- name: SaveVkMessage :one
INSERT INTO vk_messages (
    vk_owner_id, message_id, message
) VALUES (
    $1, $2, $3
)
RETURNING id
`

type SaveVkMessageParams struct {
	VkOwnerID int32
	MessageID int32
	Message   pgtype.JSONB
}

func (q *Queries) SaveVkMessage(ctx context.Context, arg SaveVkMessageParams) (int32, error) {
	row := q.db.QueryRow(ctx, saveVkMessage, arg.VkOwnerID, arg.MessageID, arg.Message)
	var id int32
	err := row.Scan(&id)
	return id, err
}
