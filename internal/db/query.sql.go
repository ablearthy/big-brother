// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
)

const createInviteCode = `-- name: CreateInviteCode :one
INSERT INTO invite_codes (
    user_id, invite_code
) VALUES (
    $1, $2
)
RETURNING user_id, invite_code
`

type CreateInviteCodeParams struct {
	UserID     int32
	InviteCode string
}

func (q *Queries) CreateInviteCode(ctx context.Context, arg CreateInviteCodeParams) (InviteCode, error) {
	row := q.db.QueryRow(ctx, createInviteCode, arg.UserID, arg.InviteCode)
	var i InviteCode
	err := row.Scan(&i.UserID, &i.InviteCode)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, password, inviter_id
) VALUES (
    $1, $2, $3
)
RETURNING id, username, password, inviter_id
`

type CreateUserParams struct {
	Username  string
	Password  string
	InviterID int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password, arg.InviterID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.InviterID,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, inviter_id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.InviterID,
	)
	return i, err
}

const getUserIdByInviteCode = `-- name: GetUserIdByInviteCode :one
SELECT user_id FROM invite_codes
WHERE invite_code = $1 LIMIT 1
`

func (q *Queries) GetUserIdByInviteCode(ctx context.Context, inviteCode string) (int32, error) {
	row := q.db.QueryRow(ctx, getUserIdByInviteCode, inviteCode)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}
