// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createInviteCode = `-- name: CreateInviteCode :one
INSERT INTO invite_codes (
    user_id, invite_code
) VALUES (
    $1, $2
)
RETURNING user_id, invite_code
`

type CreateInviteCodeParams struct {
	UserID     int32
	InviteCode string
}

func (q *Queries) CreateInviteCode(ctx context.Context, arg CreateInviteCodeParams) (InviteCode, error) {
	row := q.db.QueryRow(ctx, createInviteCode, arg.UserID, arg.InviteCode)
	var i InviteCode
	err := row.Scan(&i.UserID, &i.InviteCode)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, password, inviter_id
) VALUES (
    $1, $2, $3
)
RETURNING id, username, password, inviter_id
`

type CreateUserParams struct {
	Username  string
	Password  string
	InviterID int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password, arg.InviterID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.InviterID,
	)
	return i, err
}

const createUserToken = `-- name: CreateUserToken :one
INSERT INTO user_tokens (
    user_id, access_token
) VALUES (
    $1, $2
)
RETURNING user_id, access_token
`

type CreateUserTokenParams struct {
	UserID      int32
	AccessToken sql.NullString
}

func (q *Queries) CreateUserToken(ctx context.Context, arg CreateUserTokenParams) (UserToken, error) {
	row := q.db.QueryRow(ctx, createUserToken, arg.UserID, arg.AccessToken)
	var i UserToken
	err := row.Scan(&i.UserID, &i.AccessToken)
	return i, err
}

const createVkToken = `-- name: CreateVkToken :exec
INSERT INTO vk_tokens (
    access_token, vk_user_id
) VALUES (
    $1, $2
)
ON CONFLICT DO NOTHING
`

type CreateVkTokenParams struct {
	AccessToken string
	VkUserID    int32
}

func (q *Queries) CreateVkToken(ctx context.Context, arg CreateVkTokenParams) error {
	_, err := q.db.Exec(ctx, createVkToken, arg.AccessToken, arg.VkUserID)
	return err
}

const deleteTokenById = `-- name: DeleteTokenById :one
DELETE FROM user_tokens WHERE user_id = $1
RETURNING user_id, access_token
`

func (q *Queries) DeleteTokenById(ctx context.Context, userID int32) (UserToken, error) {
	row := q.db.QueryRow(ctx, deleteTokenById, userID)
	var i UserToken
	err := row.Scan(&i.UserID, &i.AccessToken)
	return i, err
}

const getCountOfUsedInviteCodes = `-- name: GetCountOfUsedInviteCodes :one
SELECT count(*) FROM users
WHERE inviter_id = $1
`

func (q *Queries) GetCountOfUsedInviteCodes(ctx context.Context, inviterID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getCountOfUsedInviteCodes, inviterID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTokenById = `-- name: GetTokenById :one
SELECT access_token FROM user_tokens
WHERE user_id = $1
`

func (q *Queries) GetTokenById(ctx context.Context, userID int32) (sql.NullString, error) {
	row := q.db.QueryRow(ctx, getTokenById, userID)
	var access_token sql.NullString
	err := row.Scan(&access_token)
	return access_token, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, inviter_id FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.InviterID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, password FROM users
WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID       int32
	Password string
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const getUserIdByInviteCode = `-- name: GetUserIdByInviteCode :one
SELECT user_id FROM invite_codes
WHERE invite_code = $1 LIMIT 1
`

func (q *Queries) GetUserIdByInviteCode(ctx context.Context, inviteCode string) (int32, error) {
	row := q.db.QueryRow(ctx, getUserIdByInviteCode, inviteCode)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const getVkToken = `-- name: GetVkToken :one
SELECT access_token, vk_user_id
FROM vk_tokens
WHERE access_token = $1
`

func (q *Queries) GetVkToken(ctx context.Context, accessToken string) (VkToken, error) {
	row := q.db.QueryRow(ctx, getVkToken, accessToken)
	var i VkToken
	err := row.Scan(&i.AccessToken, &i.VkUserID)
	return i, err
}
